// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/ngoctrng/bookz/internal/account"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// FindByEmail provides a mock function for the type MockRepository
func (_mock *MockRepository) FindByEmail(email string) (*account.User, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *account.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*account.User, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *account.User); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockRepository_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockRepository_Expecter) FindByEmail(email interface{}) *MockRepository_FindByEmail_Call {
	return &MockRepository_FindByEmail_Call{Call: _e.mock.On("FindByEmail", email)}
}

func (_c *MockRepository_FindByEmail_Call) Run(run func(email string)) *MockRepository_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_FindByEmail_Call) Return(user *account.User, err error) *MockRepository_FindByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockRepository_FindByEmail_Call) RunAndReturn(run func(email string) (*account.User, error)) *MockRepository_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockRepository
func (_mock *MockRepository) Save(user *account.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*account.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - user *account.User
func (_e *MockRepository_Expecter) Save(user interface{}) *MockRepository_Save_Call {
	return &MockRepository_Save_Call{Call: _e.mock.On("Save", user)}
}

func (_c *MockRepository_Save_Call) Run(run func(user *account.User)) *MockRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *account.User
		if args[0] != nil {
			arg0 = args[0].(*account.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_Save_Call) Return(err error) *MockRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Save_Call) RunAndReturn(run func(user *account.User) error) *MockRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

type MockUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecase) EXPECT() *MockUsecase_Expecter {
	return &MockUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockUsecase
func (_mock *MockUsecase) Login(email string, password string) (*account.User, error) {
	ret := _mock.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *account.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*account.User, error)); ok {
		return returnFunc(email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *account.User); ok {
		r0 = returnFunc(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *MockUsecase_Expecter) Login(email interface{}, password interface{}) *MockUsecase_Login_Call {
	return &MockUsecase_Login_Call{Call: _e.mock.On("Login", email, password)}
}

func (_c *MockUsecase_Login_Call) Run(run func(email string, password string)) *MockUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsecase_Login_Call) Return(user *account.User, err error) *MockUsecase_Login_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsecase_Login_Call) RunAndReturn(run func(email string, password string) (*account.User, error)) *MockUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockUsecase
func (_mock *MockUsecase) Register(id uuid.UUID, username string, email string, password string) error {
	ret := _mock.Called(id, username, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, string, string, string) error); ok {
		r0 = returnFunc(id, username, email, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - id uuid.UUID
//   - username string
//   - email string
//   - password string
func (_e *MockUsecase_Expecter) Register(id interface{}, username interface{}, email interface{}, password interface{}) *MockUsecase_Register_Call {
	return &MockUsecase_Register_Call{Call: _e.mock.On("Register", id, username, email, password)}
}

func (_c *MockUsecase_Register_Call) Run(run func(id uuid.UUID, username string, email string, password string)) *MockUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUsecase_Register_Call) Return(err error) *MockUsecase_Register_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsecase_Register_Call) RunAndReturn(run func(id uuid.UUID, username string, email string, password string) error) *MockUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}
