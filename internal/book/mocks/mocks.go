// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ngoctrng/bookz/internal/book"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockRepository
func (_mock *MockRepository) Delete(isbn string) error {
	ret := _mock.Called(isbn)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(isbn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - isbn string
func (_e *MockRepository_Expecter) Delete(isbn interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", isbn)}
}

func (_c *MockRepository_Delete_Call) Run(run func(isbn string)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(err error) *MockRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(isbn string) error) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByISBN provides a mock function for the type MockRepository
func (_mock *MockRepository) FindByISBN(isbn string) (*book.Book, error) {
	ret := _mock.Called(isbn)

	if len(ret) == 0 {
		panic("no return value specified for FindByISBN")
	}

	var r0 *book.Book
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*book.Book, error)); ok {
		return returnFunc(isbn)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *book.Book); ok {
		r0 = returnFunc(isbn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*book.Book)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(isbn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_FindByISBN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByISBN'
type MockRepository_FindByISBN_Call struct {
	*mock.Call
}

// FindByISBN is a helper method to define mock.On call
//   - isbn string
func (_e *MockRepository_Expecter) FindByISBN(isbn interface{}) *MockRepository_FindByISBN_Call {
	return &MockRepository_FindByISBN_Call{Call: _e.mock.On("FindByISBN", isbn)}
}

func (_c *MockRepository_FindByISBN_Call) Run(run func(isbn string)) *MockRepository_FindByISBN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_FindByISBN_Call) Return(book1 *book.Book, err error) *MockRepository_FindByISBN_Call {
	_c.Call.Return(book1, err)
	return _c
}

func (_c *MockRepository_FindByISBN_Call) RunAndReturn(run func(isbn string) (*book.Book, error)) *MockRepository_FindByISBN_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRepository
func (_mock *MockRepository) List() ([]*book.Book, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*book.Book
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*book.Book, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*book.Book); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*book.Book)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockRepository_Expecter) List() *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockRepository_List_Call) Run(run func()) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(books []*book.Book, err error) *MockRepository_List_Call {
	_c.Call.Return(books, err)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func() ([]*book.Book, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockRepository
func (_mock *MockRepository) Save(b *book.Book) error {
	ret := _mock.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*book.Book) error); ok {
		r0 = returnFunc(b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - b *book.Book
func (_e *MockRepository_Expecter) Save(b interface{}) *MockRepository_Save_Call {
	return &MockRepository_Save_Call{Call: _e.mock.On("Save", b)}
}

func (_c *MockRepository_Save_Call) Run(run func(b *book.Book)) *MockRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *book.Book
		if args[0] != nil {
			arg0 = args[0].(*book.Book)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_Save_Call) Return(err error) *MockRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Save_Call) RunAndReturn(run func(b *book.Book) error) *MockRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepository
func (_mock *MockRepository) Update(b *book.Book) error {
	ret := _mock.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*book.Book) error); ok {
		r0 = returnFunc(b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - b *book.Book
func (_e *MockRepository_Expecter) Update(b interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", b)}
}

func (_c *MockRepository_Update_Call) Run(run func(b *book.Book)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *book.Book
		if args[0] != nil {
			arg0 = args[0].(*book.Book)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(err error) *MockRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(b *book.Book) error) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

type MockUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecase) EXPECT() *MockUsecase_Expecter {
	return &MockUsecase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUsecase
func (_mock *MockUsecase) Create(b *book.Book) error {
	ret := _mock.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*book.Book) error); ok {
		r0 = returnFunc(b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - b *book.Book
func (_e *MockUsecase_Expecter) Create(b interface{}) *MockUsecase_Create_Call {
	return &MockUsecase_Create_Call{Call: _e.mock.On("Create", b)}
}

func (_c *MockUsecase_Create_Call) Run(run func(b *book.Book)) *MockUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *book.Book
		if args[0] != nil {
			arg0 = args[0].(*book.Book)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUsecase_Create_Call) Return(err error) *MockUsecase_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsecase_Create_Call) RunAndReturn(run func(b *book.Book) error) *MockUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockUsecase
func (_mock *MockUsecase) Delete(isbn string, ownerID string) error {
	ret := _mock.Called(isbn, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(isbn, ownerID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsecase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUsecase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - isbn string
//   - ownerID string
func (_e *MockUsecase_Expecter) Delete(isbn interface{}, ownerID interface{}) *MockUsecase_Delete_Call {
	return &MockUsecase_Delete_Call{Call: _e.mock.On("Delete", isbn, ownerID)}
}

func (_c *MockUsecase_Delete_Call) Run(run func(isbn string, ownerID string)) *MockUsecase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsecase_Delete_Call) Return(err error) *MockUsecase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsecase_Delete_Call) RunAndReturn(run func(isbn string, ownerID string) error) *MockUsecase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockUsecase
func (_mock *MockUsecase) Get(isbn string) (*book.Book, error) {
	ret := _mock.Called(isbn)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *book.Book
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*book.Book, error)); ok {
		return returnFunc(isbn)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *book.Book); ok {
		r0 = returnFunc(isbn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*book.Book)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(isbn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUsecase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - isbn string
func (_e *MockUsecase_Expecter) Get(isbn interface{}) *MockUsecase_Get_Call {
	return &MockUsecase_Get_Call{Call: _e.mock.On("Get", isbn)}
}

func (_c *MockUsecase_Get_Call) Run(run func(isbn string)) *MockUsecase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUsecase_Get_Call) Return(book1 *book.Book, err error) *MockUsecase_Get_Call {
	_c.Call.Return(book1, err)
	return _c
}

func (_c *MockUsecase_Get_Call) RunAndReturn(run func(isbn string) (*book.Book, error)) *MockUsecase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockUsecase
func (_mock *MockUsecase) List() ([]*book.Book, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*book.Book
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*book.Book, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*book.Book); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*book.Book)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUsecase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockUsecase_Expecter) List() *MockUsecase_List_Call {
	return &MockUsecase_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockUsecase_List_Call) Run(run func()) *MockUsecase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUsecase_List_Call) Return(books []*book.Book, err error) *MockUsecase_List_Call {
	_c.Call.Return(books, err)
	return _c
}

func (_c *MockUsecase_List_Call) RunAndReturn(run func() ([]*book.Book, error)) *MockUsecase_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUsecase
func (_mock *MockUsecase) Update(b *book.Book, ownerID string) error {
	ret := _mock.Called(b, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*book.Book, string) error); ok {
		r0 = returnFunc(b, ownerID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsecase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUsecase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - b *book.Book
//   - ownerID string
func (_e *MockUsecase_Expecter) Update(b interface{}, ownerID interface{}) *MockUsecase_Update_Call {
	return &MockUsecase_Update_Call{Call: _e.mock.On("Update", b, ownerID)}
}

func (_c *MockUsecase_Update_Call) Run(run func(b *book.Book, ownerID string)) *MockUsecase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *book.Book
		if args[0] != nil {
			arg0 = args[0].(*book.Book)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsecase_Update_Call) Return(err error) *MockUsecase_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsecase_Update_Call) RunAndReturn(run func(b *book.Book, ownerID string) error) *MockUsecase_Update_Call {
	_c.Call.Return(run)
	return _c
}
